Gruppe 1:
- 'Erledigt' im Backlog ?
- Unterstrich in Package-Name
- Datenbank statt Datasource verwendet
- JPA 2.1 in persistence.xml
- JSF 2.2 verwendet
- CDI 1.1 verwendet
- Eigenes Transaktionshandling statt EJB
- Customer laden mit JPQL statt EntityManager.find()
- Customer löschen viel zu umständlich (20 statt 1 Zeile)
- Nicht JSF 2.3 (Request-Params, FacesContext), ohne Abzug, in Zukunft bitte verwenden
- JSP-Taglib, ohne Abzug, in Zukunft bitte nicht mehr verwenden
- PostConstruct-Methode 'init-*' wird für Nichtinitialisierung (Requestparameter parsen) genutzt
Zielerreichung: 80%
-10 wg alten APIs
-10 wg vielfaches an notwendigem Code


Gruppe 2:
- super: wollen Tests machen
- dann aber leider keine Tests im Projekt
- Aussage im Review, was erreicht wurde, fehlt
- Falscher Projektname 
- JAXB verwendet, ohne Abzug, in Zukunft bitte nicht mehr verwenden
- JPA 2.1 in persistence.xml
- Eigene HTTP-Return-Code-Klasse
- SQL und java.util.Date in Modell verwendet
- JSF 2.2 verwendet
- CDI 1.1 verwendet
- Externe Abhängigkeit auf CSS-CDN
- riesiges WAR, weil alle (bis auf eine) Abhängigkeiten reingenommen
Zielerreichung: 70% 
-10 wg alten APIs
-10 wg Abhängigkeiten (beide)
-sonst Kleinkram


Gruppe 3:
- sehr detailliertes Backlog, gut!
- Falscher Projektname
- "no pom for this sprint" ???
- java.util.Date
- sinnlose @Column-Annotation
- nicht verwendeter Import
- JPQL nicht getypt verwendet
- ActionListener statt Action-Methoden
Zielerreichung: 90%
-5 wg Date
- sonst Kleinkram


Gruppe 5:
- CDI 1.1, JSF 2.2, JPA 2.1
- FacesContext nach 2.2-Manier bzw. ExternalContext
- Seitenparameter mit Servlet- statt mit JSF-API
- java.util.Date
Zielerreichung: 85%
-10 wg alten APIs
-5 wg Date
